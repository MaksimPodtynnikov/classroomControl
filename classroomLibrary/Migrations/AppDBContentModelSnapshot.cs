// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using classroomLibrary.Data;

#nullable disable

namespace classroomLibrary.Migrations
{
    [DbContext(typeof(AppDBContent))]
    partial class AppDBContentModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("classroomLibrary.Data.Models.City", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.ClassEnvironment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("classroomId")
                        .HasColumnType("int");

                    b.Property<int>("count")
                        .HasColumnType("int");

                    b.Property<int>("enviromentId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("classroomId");

                    b.HasIndex("enviromentId");

                    b.ToTable("ClassEnvironments");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Classroom", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("capacity")
                        .HasColumnType("int");

                    b.Property<int>("departmentId")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("departmentId");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Department", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("cityId")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("cityId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Enviroment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Enviroments");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Event", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("classroomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("lessonNumber")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("workerId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("classroomId");

                    b.HasIndex("workerId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.EventGroup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("eventoId")
                        .HasColumnType("int");

                    b.Property<int>("groupId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("eventoId");

                    b.HasIndex("groupId");

                    b.ToTable("EventGroups");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Group", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("direction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("faculty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("universityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("yearEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("yearStart")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("universityId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Post", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("departmentId")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("departmentId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Student", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("groupId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("telegram_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("groupId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.University", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Worker", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("oneC_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("postId")
                        .HasColumnType("int");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("postId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.ClassEnvironment", b =>
                {
                    b.HasOne("classroomLibrary.Data.Models.Classroom", "classroom")
                        .WithMany("enviroments")
                        .HasForeignKey("classroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("classroomLibrary.Data.Models.Enviroment", "enviroment")
                        .WithMany("classes")
                        .HasForeignKey("enviromentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("classroom");

                    b.Navigation("enviroment");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Classroom", b =>
                {
                    b.HasOne("classroomLibrary.Data.Models.Department", "department")
                        .WithMany("classrooms")
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Department", b =>
                {
                    b.HasOne("classroomLibrary.Data.Models.City", "city")
                        .WithMany("departments")
                        .HasForeignKey("cityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("city");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Event", b =>
                {
                    b.HasOne("classroomLibrary.Data.Models.Classroom", "classroom")
                        .WithMany("events")
                        .HasForeignKey("classroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("classroomLibrary.Data.Models.Worker", "worker")
                        .WithMany("events")
                        .HasForeignKey("workerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("classroom");

                    b.Navigation("worker");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.EventGroup", b =>
                {
                    b.HasOne("classroomLibrary.Data.Models.Event", "evento")
                        .WithMany("eventGroups")
                        .HasForeignKey("eventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("classroomLibrary.Data.Models.Group", "group")
                        .WithMany("eventGroups")
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("evento");

                    b.Navigation("group");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Group", b =>
                {
                    b.HasOne("classroomLibrary.Data.Models.University", "university")
                        .WithMany("groups")
                        .HasForeignKey("universityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("university");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Post", b =>
                {
                    b.HasOne("classroomLibrary.Data.Models.Department", "department")
                        .WithMany("posts")
                        .HasForeignKey("departmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Student", b =>
                {
                    b.HasOne("classroomLibrary.Data.Models.Group", "group")
                        .WithMany("students")
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Worker", b =>
                {
                    b.HasOne("classroomLibrary.Data.Models.Post", "post")
                        .WithMany("workers")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("post");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.City", b =>
                {
                    b.Navigation("departments");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Classroom", b =>
                {
                    b.Navigation("enviroments");

                    b.Navigation("events");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Department", b =>
                {
                    b.Navigation("classrooms");

                    b.Navigation("posts");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Enviroment", b =>
                {
                    b.Navigation("classes");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Event", b =>
                {
                    b.Navigation("eventGroups");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Group", b =>
                {
                    b.Navigation("eventGroups");

                    b.Navigation("students");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Post", b =>
                {
                    b.Navigation("workers");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.University", b =>
                {
                    b.Navigation("groups");
                });

            modelBuilder.Entity("classroomLibrary.Data.Models.Worker", b =>
                {
                    b.Navigation("events");
                });
#pragma warning restore 612, 618
        }
    }
}
